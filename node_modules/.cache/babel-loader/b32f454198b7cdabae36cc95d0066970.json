{"ast":null,"code":"import parse from './parse.js';\nimport { unsafeStringify } from './stringify.js';\n/**\n * Convert a v6 UUID to a v1 UUID\n *\n * @param {string|Uint8Array} uuid - The v6 UUID to convert to v6\n * @returns {string|Uint8Array} The v1 UUID as the same type as the `uuid` arg\n * (string or Uint8Array)\n */\n\nexport default function v6ToV1(uuid) {\n  var v6Bytes = typeof uuid === 'string' ? parse(uuid) : uuid;\n\n  var v1Bytes = _v6ToV1(v6Bytes);\n\n  return typeof uuid === 'string' ? unsafeStringify(v1Bytes) : v1Bytes;\n} // Do the field transformation needed for v6 -> v1\n\nfunction _v6ToV1(v6Bytes) {\n  return Uint8Array.of((v6Bytes[3] & 0x0f) << 4 | v6Bytes[4] >> 4 & 0x0f, (v6Bytes[4] & 0x0f) << 4 | (v6Bytes[5] & 0xf0) >> 4, (v6Bytes[5] & 0x0f) << 4 | v6Bytes[6] & 0x0f, v6Bytes[7], (v6Bytes[1] & 0x0f) << 4 | (v6Bytes[2] & 0xf0) >> 4, (v6Bytes[2] & 0x0f) << 4 | (v6Bytes[3] & 0xf0) >> 4, 0x10 | (v6Bytes[0] & 0xf0) >> 4, (v6Bytes[0] & 0x0f) << 4 | (v6Bytes[1] & 0xf0) >> 4, v6Bytes[8], v6Bytes[9], v6Bytes[10], v6Bytes[11], v6Bytes[12], v6Bytes[13], v6Bytes[14], v6Bytes[15]);\n}","map":{"version":3,"names":["parse","unsafeStringify","v6ToV1","uuid","v6Bytes","v1Bytes","_v6ToV1","Uint8Array","of"],"sources":["C:/Users/win/Desktop/Programação/organo/node_modules/uuid/dist/esm-browser/v6ToV1.js"],"sourcesContent":["import parse from './parse.js';\nimport { unsafeStringify } from './stringify.js';\n\n/**\n * Convert a v6 UUID to a v1 UUID\n *\n * @param {string|Uint8Array} uuid - The v6 UUID to convert to v6\n * @returns {string|Uint8Array} The v1 UUID as the same type as the `uuid` arg\n * (string or Uint8Array)\n */\nexport default function v6ToV1(uuid) {\n  var v6Bytes = typeof uuid === 'string' ? parse(uuid) : uuid;\n  var v1Bytes = _v6ToV1(v6Bytes);\n  return typeof uuid === 'string' ? unsafeStringify(v1Bytes) : v1Bytes;\n}\n\n// Do the field transformation needed for v6 -> v1\nfunction _v6ToV1(v6Bytes) {\n  return Uint8Array.of((v6Bytes[3] & 0x0f) << 4 | v6Bytes[4] >> 4 & 0x0f, (v6Bytes[4] & 0x0f) << 4 | (v6Bytes[5] & 0xf0) >> 4, (v6Bytes[5] & 0x0f) << 4 | v6Bytes[6] & 0x0f, v6Bytes[7], (v6Bytes[1] & 0x0f) << 4 | (v6Bytes[2] & 0xf0) >> 4, (v6Bytes[2] & 0x0f) << 4 | (v6Bytes[3] & 0xf0) >> 4, 0x10 | (v6Bytes[0] & 0xf0) >> 4, (v6Bytes[0] & 0x0f) << 4 | (v6Bytes[1] & 0xf0) >> 4, v6Bytes[8], v6Bytes[9], v6Bytes[10], v6Bytes[11], v6Bytes[12], v6Bytes[13], v6Bytes[14], v6Bytes[15]);\n}"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,YAAlB;AACA,SAASC,eAAT,QAAgC,gBAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;EACnC,IAAIC,OAAO,GAAG,OAAOD,IAAP,KAAgB,QAAhB,GAA2BH,KAAK,CAACG,IAAD,CAAhC,GAAyCA,IAAvD;;EACA,IAAIE,OAAO,GAAGC,OAAO,CAACF,OAAD,CAArB;;EACA,OAAO,OAAOD,IAAP,KAAgB,QAAhB,GAA2BF,eAAe,CAACI,OAAD,CAA1C,GAAsDA,OAA7D;AACD,C,CAED;;AACA,SAASC,OAAT,CAAiBF,OAAjB,EAA0B;EACxB,OAAOG,UAAU,CAACC,EAAX,CAAc,CAACJ,OAAO,CAAC,CAAD,CAAP,GAAa,IAAd,KAAuB,CAAvB,GAA2BA,OAAO,CAAC,CAAD,CAAP,IAAc,CAAd,GAAkB,IAA3D,EAAiE,CAACA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAd,KAAuB,CAAvB,GAA2B,CAACA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAd,KAAuB,CAAnH,EAAsH,CAACA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAd,KAAuB,CAAvB,GAA2BA,OAAO,CAAC,CAAD,CAAP,GAAa,IAA9J,EAAoKA,OAAO,CAAC,CAAD,CAA3K,EAAgL,CAACA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAd,KAAuB,CAAvB,GAA2B,CAACA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAd,KAAuB,CAAlO,EAAqO,CAACA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAd,KAAuB,CAAvB,GAA2B,CAACA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAd,KAAuB,CAAvR,EAA0R,OAAO,CAACA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAd,KAAuB,CAAxT,EAA2T,CAACA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAd,KAAuB,CAAvB,GAA2B,CAACA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAd,KAAuB,CAA7W,EAAgXA,OAAO,CAAC,CAAD,CAAvX,EAA4XA,OAAO,CAAC,CAAD,CAAnY,EAAwYA,OAAO,CAAC,EAAD,CAA/Y,EAAqZA,OAAO,CAAC,EAAD,CAA5Z,EAAkaA,OAAO,CAAC,EAAD,CAAza,EAA+aA,OAAO,CAAC,EAAD,CAAtb,EAA4bA,OAAO,CAAC,EAAD,CAAnc,EAAycA,OAAO,CAAC,EAAD,CAAhd,CAAP;AACD"},"metadata":{},"sourceType":"module"}