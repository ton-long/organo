{"ast":null,"code":"import rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n/**\n * UUID V7 - Unix Epoch time-based UUID\n *\n * The IETF has published RFC9562, introducing 3 new UUID versions (6,7,8). This\n * implementation of V7 is based on the accepted, though not yet approved,\n * revisions.\n *\n * RFC 9562:https://www.rfc-editor.org/rfc/rfc9562.html Universally Unique\n * IDentifiers (UUIDs)\n\n *\n * Sample V7 value:\n * https://www.rfc-editor.org/rfc/rfc9562.html#name-example-of-a-uuidv7-value\n *\n * Monotonic Bit Layout: RFC rfc9562.6.2 Method 1, Dedicated Counter Bits ref:\n *     https://www.rfc-editor.org/rfc/rfc9562.html#section-6.2-5.1\n *\n *   0                   1                   2                   3 0 1 2 3 4 5 6\n *   7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |                          unix_ts_ms                           |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |          unix_ts_ms           |  ver  |        seq_hi         |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |var|               seq_low               |        rand         |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |                             rand                              |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *\n * seq is a 31 bit serialized counter; comprised of 12 bit seq_hi and 19 bit\n * seq_low, and randomly initialized upon timestamp change. 31 bit counter size\n * was selected as any bitwise operations in node are done as _signed_ 32 bit\n * ints. we exclude the sign bit.\n */\n\nvar _seqLow = null;\nvar _seqHigh = null;\nvar _msecs = 0;\n\nfunction v7(options, buf, offset) {\n  options = options || {}; // initialize buffer and pointer\n\n  var i = buf && offset || 0;\n  var b = buf || new Uint8Array(16); // rnds is Uint8Array(16) filled with random bytes\n\n  var rnds = options.random || (options.rng || rng)(); // milliseconds since unix epoch, 1970-01-01 00:00\n\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // seq is user provided 31 bit counter\n\n  var seq = options.seq !== undefined ? options.seq : null; // initialize local seq high/low parts\n\n  var seqHigh = _seqHigh;\n  var seqLow = _seqLow; // check if clock has advanced and user has not provided msecs\n\n  if (msecs > _msecs && options.msecs === undefined) {\n    _msecs = msecs; // unless user provided seq, reset seq parts\n\n    if (seq !== null) {\n      seqHigh = null;\n      seqLow = null;\n    }\n  } // if we have a user provided seq\n\n\n  if (seq !== null) {\n    // trim provided seq to 31 bits of value, avoiding overflow\n    if (seq > 0x7fffffff) {\n      seq = 0x7fffffff;\n    } // split provided seq into high/low parts\n\n\n    seqHigh = seq >>> 19 & 0xfff;\n    seqLow = seq & 0x7ffff;\n  } // randomly initialize seq\n\n\n  if (seqHigh === null || seqLow === null) {\n    seqHigh = rnds[6] & 0x7f;\n    seqHigh = seqHigh << 8 | rnds[7];\n    seqLow = rnds[8] & 0x3f; // pad for var\n\n    seqLow = seqLow << 8 | rnds[9];\n    seqLow = seqLow << 5 | rnds[10] >>> 3;\n  } // increment seq if within msecs window\n\n\n  if (msecs + 10000 > _msecs && seq === null) {\n    if (++seqLow > 0x7ffff) {\n      seqLow = 0;\n\n      if (++seqHigh > 0xfff) {\n        seqHigh = 0; // increment internal _msecs. this allows us to continue incrementing\n        // while staying monotonic. Note, once we hit 10k milliseconds beyond system\n        // clock, we will reset breaking monotonicity (after (2^31)*10000 generations)\n\n        _msecs++;\n      }\n    }\n  } else {\n    // resetting; we have advanced more than\n    // 10k milliseconds beyond system clock\n    _msecs = msecs;\n  }\n\n  _seqHigh = seqHigh;\n  _seqLow = seqLow; // [bytes 0-5] 48 bits of local timestamp\n\n  b[i++] = _msecs / 0x10000000000 & 0xff;\n  b[i++] = _msecs / 0x100000000 & 0xff;\n  b[i++] = _msecs / 0x1000000 & 0xff;\n  b[i++] = _msecs / 0x10000 & 0xff;\n  b[i++] = _msecs / 0x100 & 0xff;\n  b[i++] = _msecs & 0xff; // [byte 6] - set 4 bits of version (7) with first 4 bits seq_hi\n\n  b[i++] = seqHigh >>> 4 & 0x0f | 0x70; // [byte 7] remaining 8 bits of seq_hi\n\n  b[i++] = seqHigh & 0xff; // [byte 8] - variant (2 bits), first 6 bits seq_low\n\n  b[i++] = seqLow >>> 13 & 0x3f | 0x80; // [byte 9] 8 bits seq_low\n\n  b[i++] = seqLow >>> 5 & 0xff; // [byte 10] remaining 5 bits seq_low, 3 bits random\n\n  b[i++] = seqLow << 3 & 0xff | rnds[10] & 0x07; // [bytes 11-15] always random\n\n  b[i++] = rnds[11];\n  b[i++] = rnds[12];\n  b[i++] = rnds[13];\n  b[i++] = rnds[14];\n  b[i++] = rnds[15];\n  return buf || unsafeStringify(b);\n}\n\nexport default v7;","map":{"version":3,"names":["rng","unsafeStringify","_seqLow","_seqHigh","_msecs","v7","options","buf","offset","i","b","Uint8Array","rnds","random","msecs","undefined","Date","now","seq","seqHigh","seqLow"],"sources":["C:/Users/win/Desktop/Programação/organo/node_modules/uuid/dist/esm-browser/v7.js"],"sourcesContent":["import rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\n/**\n * UUID V7 - Unix Epoch time-based UUID\n *\n * The IETF has published RFC9562, introducing 3 new UUID versions (6,7,8). This\n * implementation of V7 is based on the accepted, though not yet approved,\n * revisions.\n *\n * RFC 9562:https://www.rfc-editor.org/rfc/rfc9562.html Universally Unique\n * IDentifiers (UUIDs)\n\n *\n * Sample V7 value:\n * https://www.rfc-editor.org/rfc/rfc9562.html#name-example-of-a-uuidv7-value\n *\n * Monotonic Bit Layout: RFC rfc9562.6.2 Method 1, Dedicated Counter Bits ref:\n *     https://www.rfc-editor.org/rfc/rfc9562.html#section-6.2-5.1\n *\n *   0                   1                   2                   3 0 1 2 3 4 5 6\n *   7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |                          unix_ts_ms                           |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |          unix_ts_ms           |  ver  |        seq_hi         |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |var|               seq_low               |        rand         |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *  |                             rand                              |\n *  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n *\n * seq is a 31 bit serialized counter; comprised of 12 bit seq_hi and 19 bit\n * seq_low, and randomly initialized upon timestamp change. 31 bit counter size\n * was selected as any bitwise operations in node are done as _signed_ 32 bit\n * ints. we exclude the sign bit.\n */\n\nvar _seqLow = null;\nvar _seqHigh = null;\nvar _msecs = 0;\nfunction v7(options, buf, offset) {\n  options = options || {};\n\n  // initialize buffer and pointer\n  var i = buf && offset || 0;\n  var b = buf || new Uint8Array(16);\n\n  // rnds is Uint8Array(16) filled with random bytes\n  var rnds = options.random || (options.rng || rng)();\n\n  // milliseconds since unix epoch, 1970-01-01 00:00\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now();\n\n  // seq is user provided 31 bit counter\n  var seq = options.seq !== undefined ? options.seq : null;\n\n  // initialize local seq high/low parts\n  var seqHigh = _seqHigh;\n  var seqLow = _seqLow;\n\n  // check if clock has advanced and user has not provided msecs\n  if (msecs > _msecs && options.msecs === undefined) {\n    _msecs = msecs;\n\n    // unless user provided seq, reset seq parts\n    if (seq !== null) {\n      seqHigh = null;\n      seqLow = null;\n    }\n  }\n\n  // if we have a user provided seq\n  if (seq !== null) {\n    // trim provided seq to 31 bits of value, avoiding overflow\n    if (seq > 0x7fffffff) {\n      seq = 0x7fffffff;\n    }\n\n    // split provided seq into high/low parts\n    seqHigh = seq >>> 19 & 0xfff;\n    seqLow = seq & 0x7ffff;\n  }\n\n  // randomly initialize seq\n  if (seqHigh === null || seqLow === null) {\n    seqHigh = rnds[6] & 0x7f;\n    seqHigh = seqHigh << 8 | rnds[7];\n    seqLow = rnds[8] & 0x3f; // pad for var\n    seqLow = seqLow << 8 | rnds[9];\n    seqLow = seqLow << 5 | rnds[10] >>> 3;\n  }\n\n  // increment seq if within msecs window\n  if (msecs + 10000 > _msecs && seq === null) {\n    if (++seqLow > 0x7ffff) {\n      seqLow = 0;\n      if (++seqHigh > 0xfff) {\n        seqHigh = 0;\n\n        // increment internal _msecs. this allows us to continue incrementing\n        // while staying monotonic. Note, once we hit 10k milliseconds beyond system\n        // clock, we will reset breaking monotonicity (after (2^31)*10000 generations)\n        _msecs++;\n      }\n    }\n  } else {\n    // resetting; we have advanced more than\n    // 10k milliseconds beyond system clock\n    _msecs = msecs;\n  }\n  _seqHigh = seqHigh;\n  _seqLow = seqLow;\n\n  // [bytes 0-5] 48 bits of local timestamp\n  b[i++] = _msecs / 0x10000000000 & 0xff;\n  b[i++] = _msecs / 0x100000000 & 0xff;\n  b[i++] = _msecs / 0x1000000 & 0xff;\n  b[i++] = _msecs / 0x10000 & 0xff;\n  b[i++] = _msecs / 0x100 & 0xff;\n  b[i++] = _msecs & 0xff;\n\n  // [byte 6] - set 4 bits of version (7) with first 4 bits seq_hi\n  b[i++] = seqHigh >>> 4 & 0x0f | 0x70;\n\n  // [byte 7] remaining 8 bits of seq_hi\n  b[i++] = seqHigh & 0xff;\n\n  // [byte 8] - variant (2 bits), first 6 bits seq_low\n  b[i++] = seqLow >>> 13 & 0x3f | 0x80;\n\n  // [byte 9] 8 bits seq_low\n  b[i++] = seqLow >>> 5 & 0xff;\n\n  // [byte 10] remaining 5 bits seq_low, 3 bits random\n  b[i++] = seqLow << 3 & 0xff | rnds[10] & 0x07;\n\n  // [bytes 11-15] always random\n  b[i++] = rnds[11];\n  b[i++] = rnds[12];\n  b[i++] = rnds[13];\n  b[i++] = rnds[14];\n  b[i++] = rnds[15];\n  return buf || unsafeStringify(b);\n}\nexport default v7;"],"mappings":"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"},"metadata":{},"sourceType":"module"}