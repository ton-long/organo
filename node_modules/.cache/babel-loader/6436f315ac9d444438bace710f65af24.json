{"ast":null,"code":"import rng from './rng.js';\nimport { unsafeStringify } from './stringify.js'; // **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\n\nvar _clockseq; // Previous uuid creation time\n\n\nvar _lastMSecs = 0;\nvar _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details\n\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || new Array(16);\n  options = options || {};\n  var node = options.node;\n  var clockseq = options.clockseq; // v1 only: Use cached `node` and `clockseq` values\n\n  if (!options._v6) {\n    if (!node) {\n      node = _nodeId;\n    }\n\n    if (clockseq == null) {\n      clockseq = _clockseq;\n    }\n  } // Handle cases where we need entropy.  We do this lazily to minimize issues\n  // related to insufficient system entropy.  See #189\n\n\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || rng)(); // Randomize node\n\n    if (node == null) {\n      node = [seedBytes[0], seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]]; // v1 only: cache node value for reuse\n\n      if (!_nodeId && !options._v6) {\n        // per RFC4122 4.5: Set MAC multicast bit (v1 only)\n        node[0] |= 0x01; // Set multicast bit\n\n        _nodeId = node;\n      }\n    } // Randomize clockseq\n\n\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n\n      if (_clockseq === undefined && !options._v6) {\n        _clockseq = clockseq;\n      }\n    }\n  } // v1 & v6 timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so time is\n  // handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\n\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)\n\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression\n\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n\n\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  } // Per 4.2.1.2 Throw error if too many uuids are requested\n\n\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\n  msecs += 12219292800000; // `time_low`\n\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff; // `time_mid`\n\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff; // `time_high_and_version`\n\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\n  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\n  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`\n\n  b[i++] = clockseq & 0xff; // `node`\n\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf || unsafeStringify(b);\n}\n\nexport default v1;","map":{"version":3,"names":["rng","unsafeStringify","_nodeId","_clockseq","_lastMSecs","_lastNSecs","v1","options","buf","offset","i","b","Array","node","clockseq","_v6","seedBytes","random","undefined","msecs","Date","now","nsecs","dt","Error","tl","tmh","n"],"sources":["C:/Users/win/Desktop/Programação/organo/node_modules/uuid/dist/esm-browser/v1.js"],"sourcesContent":["import rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\nvar _nodeId;\nvar _clockseq;\n\n// Previous uuid creation time\nvar _lastMSecs = 0;\nvar _lastNSecs = 0;\n\n// See https://github.com/uuidjs/uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || new Array(16);\n  options = options || {};\n  var node = options.node;\n  var clockseq = options.clockseq;\n\n  // v1 only: Use cached `node` and `clockseq` values\n  if (!options._v6) {\n    if (!node) {\n      node = _nodeId;\n    }\n    if (clockseq == null) {\n      clockseq = _clockseq;\n    }\n  }\n\n  // Handle cases where we need entropy.  We do this lazily to minimize issues\n  // related to insufficient system entropy.  See #189\n  if (node == null || clockseq == null) {\n    var seedBytes = options.random || (options.rng || rng)();\n\n    // Randomize node\n    if (node == null) {\n      node = [seedBytes[0], seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];\n\n      // v1 only: cache node value for reuse\n      if (!_nodeId && !options._v6) {\n        // per RFC4122 4.5: Set MAC multicast bit (v1 only)\n        node[0] |= 0x01; // Set multicast bit\n\n        _nodeId = node;\n      }\n    }\n\n    // Randomize clockseq\n    if (clockseq == null) {\n      // Per 4.2.2, randomize (14 bit) clockseq\n      clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;\n      if (_clockseq === undefined && !options._v6) {\n        _clockseq = clockseq;\n      }\n    }\n  }\n\n  // v1 & v6 timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so time is\n  // handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : Date.now();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error(\"uuid.v1(): Can't create more than 10M uuids/sec\");\n  }\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n  return buf || unsafeStringify(b);\n}\nexport default v1;"],"mappings":"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"},"metadata":{},"sourceType":"module"}